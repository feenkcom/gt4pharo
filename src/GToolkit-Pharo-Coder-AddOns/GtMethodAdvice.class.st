Class {
	#name : #GtMethodAdvice,
	#superclass : #Object,
	#classVars : [
		'ActiveCritics'
	],
	#category : #'GToolkit-Pharo-Coder-AddOns-MethodAdvices'
}

{ #category : #accessing }
GtMethodAdvice class >> activeCritics [
	^ ActiveCritics
		ifNil: [ (self withAllSubclasses
				select: [ :each | each isAbstract not and: [ each isDefault ] ])
				collect: [ :each | each new ] ]
]

{ #category : #accessing }
GtMethodAdvice class >> gtMethodsFor: aView [
	<gtClassView>
	self isAbstract ifTrue: [ ^ aView empty ].
	^ aView forward
		title: 'Issues';
		priority: 20;
		object: [ GtSearchMethodAdviceFilter new
				critic: self new;
				yourself ];
		view: #gtItemsFor:
]

{ #category : #testing }
GtMethodAdvice class >> isAbstract [
	^ self == GtMethodAdvice
]

{ #category : #testing }
GtMethodAdvice class >> isDefault [
	^ true
]

{ #category : #comparing }
GtMethodAdvice >> = anObject [
	^ self class = anObject class
]

{ #category : #accessing }
GtMethodAdvice >> description [
	^ self subclassResponsibility
]

{ #category : #styling }
GtMethodAdvice >> descriptionWithEditor: anEditorElement [
	| text browseAttribute |
	text := self description asRopedText.
	browseAttribute := GtButtonAttribute new
			beAppend;
			stencil: [ BrButton new
					aptitude: BrGlamorousButtonWithIconAptitude new;
					beTinySize;
					margin: (BlInsets left: 5);
					icon: BrGlamorousVectorIcons browse;
					action: [ anEditorElement phlow spawnTool: (GtClassCoderTool forClass: self class) ];
					label: 'Browse rule definition' ].
	text
		attribute: browseAttribute
		from: text size
		to: text size.
	^ text
]

{ #category : #styling }
GtMethodAdvice >> errorHighlightAttribute [
	^ BlTextHighlightAttribute paint: BrGlamorousColors paleErrorBackgroundColor
]

{ #category : #accessing }
GtMethodAdvice >> finish: aNode from: criticRunner [
]

{ #category : #styling }
GtMethodAdvice >> fixItActionsFor: aNode using: aCriticStyler [
	^ #()
]

{ #category : #styling }
GtMethodAdvice >> fixItLocationFor: aSmaCCNode [
	(aSmaCCNode isMessage or: [ aSmaCCNode isMethodPattern ])
		ifTrue: [ ^ aSmaCCNode selectorParts last stopPosition ].
	aSmaCCNode isMessageSend
		ifTrue: [ ^ aSmaCCNode message selectorParts last stopPosition ].
	^ aSmaCCNode stopPosition
]

{ #category : #comparing }
GtMethodAdvice >> hash [
	^ self class hash
]

{ #category : #styling }
GtMethodAdvice >> highlightPositionsFor: aSmaCCNode [
	aSmaCCNode isMessage
		ifTrue: [ ^ aSmaCCNode selectorParts collect: [ :each | each sourceInterval ] ].
	aSmaCCNode isMessageSend
		ifTrue: [ ^ self highlightPositionsFor: aSmaCCNode message ].
	^ {aSmaCCNode sourceInterval}
]

{ #category : #testing }
GtMethodAdvice >> includeFixIt [
	^ true
]

{ #category : #testing }
GtMethodAdvice >> includeHighlight [
	^ true
]

{ #category : #testing }
GtMethodAdvice >> matches: aNode from: aCriticRunner [
	^ self subclassResponsibility
]

{ #category : #accessing }
GtMethodAdvice >> name [
	^ ''
]

{ #category : #accessing }
GtMethodAdvice >> potentialFilter [
	^ nil
]

{ #category : #styling }
GtMethodAdvice >> styleFixIt: aNode using: aCriticStyler [
	| location hoverMarker hoverAttribute fixItAttribute |
	self includeFixIt ifFalse: [ ^ self ].
	location := self fixItLocationFor: aNode.
	hoverMarker := GtFixItMarkerAttribute new.
	hoverAttribute := self errorHighlightAttribute.
	fixItAttribute := GtFixItAttribute new
			label: self name;
			hoverMarker: hoverMarker;
			hoverAttribute: hoverAttribute;
			description: [ :editorElement | self descriptionWithEditor: editorElement ];
			fixItActions: [ self fixItActionsFor: aNode using: aCriticStyler ];
			yourself.
	hoverMarker fixItAttribute: fixItAttribute.
	aCriticStyler
		attributes: {fixItAttribute}
		from: location
		to: location.
	self includeHighlight ifFalse: [ ^ self ].
	(self highlightPositionsFor: aNode)
		do: [ :each | 
			(aCriticStyler text from: each first to: each last)
				attribute: hoverMarker;
				onCursorEnter: [ :aTextEditor :anEvent :aFromIndex :aToIndex | 
						aTextEditor text
							findAttribute: hoverMarker
							indicesDo: [ :aHighlightStart :aHighlightEnd | 
								(aTextEditor text from: aHighlightStart to: aHighlightEnd)
									attribute: hoverAttribute ] ]
					leave: [ :aTextEditor :anEvent :aFromIndex :aToIndex | aTextEditor text clearAttributes: [ :e | e == hoverAttribute ] ] ]
]

{ #category : #styling }
GtMethodAdvice >> styleHighlight: aNode using: aCriticStyler [
	(self includeHighlight and: [ self includeFixIt not ]) ifFalse: [ ^ self ].
	(self highlightPositionsFor: aNode)
		do: [ :each | 
			aCriticStyler
				attributes: {self errorHighlightAttribute}
				from: each first
				to: each last ]
]

{ #category : #styling }
GtMethodAdvice >> styleIssue: aNode using: aCriticStyler [
	self styleFixIt: aNode using: aCriticStyler.
	self styleHighlight: aNode using: aCriticStyler
]
