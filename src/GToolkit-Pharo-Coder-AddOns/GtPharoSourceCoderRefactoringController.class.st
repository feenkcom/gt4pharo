Class {
	#name : #GtPharoSourceCoderRefactoringController,
	#superclass : #GtSourceCoderRefactoringController,
	#instVars : [
		'modelUpdater'
	],
	#category : #'GToolkit-Pharo-Coder-AddOns-Refactoring - Base'
}

{ #category : #'private - attributes' }
GtPharoSourceCoderRefactoringController >> addRefactoringChangesPreview: aRefactoring at: aTextPosition whenComplete: aBlock [
	self removeRefactoringAttribute.
	refactoringPreviewAttributes := self sourceCoderViewModel
			addTextAttribute: (GtRefactoringChangesAttribute new
					refactoring: aRefactoring;
					completionAction: aBlock;
					cancelAction: [ self cancelRefactoring ];
					showWhenCreated: self previewDisplaysImmediately)
			from: aTextPosition
			to: aTextPosition
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> addRefactoringPreview [
	| refactoring |
	self isValidForPreview ifFalse: [ ^ self cancelRefactoring ].
	refactoring := self refactoring.
	refactoring ifNil: [ ^ self cancelRefactoring ].
	self setPreviewOptionsOn: refactoring.
	self
		addRefactoringChangesPreview: refactoring
		at: self previewPosition
		whenComplete: [ self finishRefactoring: refactoring ]
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> ast [
	^ sourceCoderViewModel astAwait
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> compileSnippetMethodIn: model [
	| cls |
	cls := model classFor: self snippetClass.
	cls
		compile: self snippetSelector , ' ' , self sourceText asString
		classified: #accessing
]

{ #category : #executing }
GtPharoSourceCoderRefactoringController >> createModel [
	| model modelClass |
	model := RBClassModelFactory rbNamespace
			onEnvironment: RBBrowserEnvironment new.
	model name: self refactoringName.
	sourceCoderViewModel coderModel isForMethod
		ifTrue: [ modelClass := model classFor: sourceCoderViewModel behavior.
			(modelClass sourceCodeFor: sourceCoderViewModel selector)
				~= originalSource asString
				ifTrue: [ modelClass
						compile: originalSource asString
						classified: sourceCoderViewModel protocol ] ].
	^ model
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> createRefactoringModel [
	| aModel aBehavior aProtocol aSourceString aCurrentSelector |
	
	aBehavior := sourceCoderViewModel behavior.
	aProtocol := sourceCoderViewModel protocol.
	aSourceString := sourceCoderViewModel sourceText asString.
	aCurrentSelector := sourceCoderViewModel coderModel currentSelector.
	
	aModel := RBClassModelFactory rbNamespace onEnvironment: RBBrowserEnvironment new.
	(((aModel classFor: aBehavior) directlyDefinesMethod: aCurrentSelector) not
		or: [ ((aModel classFor: aBehavior) sourceCodeFor: aCurrentSelector) ~= aSourceString ])
		ifTrue: [ (aModel classFor: aBehavior) compile: aSourceString classified: aProtocol ].

	aModel name: self refactoringName.

	^ aModel
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> createSnippetRefactoringModel [
	| model |
	model := RBClassModelFactory rbNamespace
			onEnvironment: RBBrowserEnvironment new.
	self compileSnippetMethodIn: model.
	self modelUpdater cull: model.
	^ model
]

{ #category : #executing }
GtPharoSourceCoderRefactoringController >> findNodeAssigning: aString [
	self ast allNodesDo: [ :each | (each isAssignment and: [ each variable source = aString ]) ifTrue: [ ^ each variable ] ].
	^ nil
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> finishRefactoring: refactoring [
	^ self cleanUp
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> isValidForPreview [
	^ true
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> modelUpdater [
	^ modelUpdater ifNil: [ [ :model |  ] ]
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> modelUpdater: aBlock [
	modelUpdater := aBlock
]

{ #category : #testing }
GtPharoSourceCoderRefactoringController >> previewDisplaysImmediately [
	^ false
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> previewPosition [
	self subclassResponsibility
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> refactoredSnippetCodeFrom: refactoring [
	| ast |
	ast := ((refactoring model classFor: self snippetClass)
			methodFor: self snippetSelector) ast body.
	ast temporaryNames do: [ :each | ast removeTemporaryNamed: each ].
	^ ast formattedCode
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> safeMethodName: methodName in: modelClass [
	| index selector name argCount |
	argCount := methodName arguments size.
	name := '_'.
	index := 0.
	[ selector := (String
			streamContents: [ :stream | 
				stream nextPutAll: name.
				argCount >= 1
					ifTrue: [ stream nextPut: $:.
						2 to: argCount do: [ :i | stream nextPutAll: '_:' ] ] ]) asSymbol.
	modelClass hierarchyDefinesMethod: selector ]
		whileTrue: [ name := name , index printString.
			index := index + 1 ].
	^ selector
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> selfArgumentName [
	| name |
	name := sourceCoderViewModel behavior name asString
			copyReplaceAll: ' class'
			with: 'Class'.
	^ (name first isVowel ifTrue: [ 'an' ] ifFalse: [ 'a' ]) , name
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> setPreviewOptionsOn: refactoring [ 
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> snippetClass [
	^ nil class
]

{ #category : #accessing }
GtPharoSourceCoderRefactoringController >> snippetIntervalFor: anInterval [
	^ anInterval first + self snippetSelector size + 1
		to: anInterval last + self snippetSelector size + 1
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> snippetSelector [
	^ #_
]

{ #category : #private }
GtPharoSourceCoderRefactoringController >> sourceAst [
	^ GtPharoParser
		parse: self sourceText characters asString
		startingAt: self parserStartingState
]
